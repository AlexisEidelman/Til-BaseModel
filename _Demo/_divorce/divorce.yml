entities:
    person:          
        processes:     
            divorce : 
                - divorce: ISFEMALE and INCOUPLE and (pers2fut.civilstate != 2 or pers2fut.conj != conj)
                - to_divorce: divorce or l_conj.divorce
              
                
                ### men 
                # smallest id move out from house
                # TODO: à améliorer en fonction de la propriété, de qui part et tout
                - MOVE: (to_divorce and l_conj.men==men and id < l_conj.id)
                # si on est chez ses parents et que c'est eux les chef, c'est à l'autre de bouger : on les retire
                - MOVE1: MOVE and not ((l_pere.men == men or l_mere.men == men) and (quimen>1)) 
                # on ajoute leur conjoint
                - MOVE: MOVE1 or (l_conj.MOVE and not l_conj.MOVE1)
                - assertEqual( count(MOVE) , count(to_divorce and l_conj.men==men)/2)
                # pour les couples homosexuels, à ce niveau là, on peut avoir deux MOVE
                - new_men: if(MOVE,
                            new('menage', filter=MOVE,
                                region_id=l_men.region_id,
                                rent=l_men.rent/1.5, pref=id),
                            men)
                - quimen: if(to_divorce and l_conj.men==men and quimen==1, 0, quimen) # condition sur quimen pour les mariés qui vivent chez leur parent
                
                # enfants -> restent avec leur mère
                - new_men: if(l_mere.MOVE and  (l_mere.men==men) and (new_men==men),
                                l_mere.new_men,
                                if(l_pere.MOVE and  (l_pere.men==men) and (new_men==men),
                                    l_pere.new_men,
                                new_men))               
                # les autres restent mais pourquoi ??...

                ###foy
                # biggest move out from declar
                # on ajoute condition sur l_conj, pour ne pas appliquer aux couples non mariés
                - MOVE: (to_divorce and LEGAL_UNION and id > l_conj.id) 
                - MOVE1: MOVE and not ((l_pere.foy == foy or l_mere.foy == foy) and (quifoy>1))  
                - MOVE: MOVE1 or (l_conj.MOVE and not l_conj.MOVE1)  
                
                 # - csv(dump(id, age, sexe, l_conj.id, l_conj.age,
                           # l_conj.sexe, men, filter=justcoupled),
                      # fname='check_simul//person_{period}.csv')
                
                - assertEqual( count(MOVE) , count(to_divorce and LEGAL_UNION)/2)                
                - new_foy: if(MOVE, 
                                new('declar', filter=MOVE ,
                                     pond=l_foy.pond, vous= id),
                                foy) 
                - quifoy: if(to_divorce and LEGAL_UNION and quifoy==1, 0, quifoy)
                # plus tard changer le vous ici directement
                 
                # enfant
                # children go with....?? HYPOTHESIS
                # priority to fater...
                #TODO: do it randomly (but test if the couple are parents and not a second marriage)
                - new_foy: if(l_pere.MOVE and (l_pere.foy==foy) and (new_foy==foy),
                                    l_pere.new_foy,
                                    if(l_mere.MOVE and (l_mere.foy==foy) and (new_foy==foy),
                                         l_mere.new_foy,
                                         new_foy))
                                    
                # les autres restent mais pourquoi ??...
                - men: new_men
                - foy: new_foy

                - civilstate: if(to_divorce and LEGAL_UNION, DIVORCED, civilstate)
                - conj: if(to_divorce, UNSET, conj)
                - dur_in_couple: if(not INCOUPLE, 0, dur_in_couple)     
                - dur_out_couple: if(not INCOUPLE, dur_out_couple + 1, 0)
                # note : dur_in_couple is incremented in union
  

                # remplacera les etapes d'actualisation menage et declar quand fonctionnel
                # - l_men.set(pref = persons.max(id,quimen==0)
                # - l_foy.set(vous = on_declar.max(id,quifoy==0)
                
                # - l_men.pref: if(quimen==0, id, l_men.pref)
                # - l_foy.vous: if(quifoy==0, id, l_foy.vous)
                
                - assertEqual(max(l_men.get(persons.count(quimen==0))),1)
                - assertTrue(min(men)>=0)
                - assertEqual(max(l_foy.get(on_declar.count(quifoy==0))),1)
                - assertTrue(min(foy)>=0)                
                

            dump_info: csv(dump(id, age, sexe, men, l_men.nb_persons,
                                l_mere.age, l_conj.age), suffix='info')
            
            civilstate_changes: show(groupby(civilstate, lag(civilstate)))