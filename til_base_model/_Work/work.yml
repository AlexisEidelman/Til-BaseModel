entities:
    person:          
        processes:      
            # le programme est pense pour faire tourner d'abord entree chomage et ensuite entree_emploi
            work:
              - workstate: if(pers2fut.workstate != workstate and pers2fut.workstate != -1, 
                      pers2fut.workstate,
                      workstate)
              - sali: if(ISINWORK and pers2fut.sali != -1, 
                      pers2fut.sali,
                      sali)
              - assertTrue( count(ISINWORK and pers2fut.sali == -1) == 0 )
              

            retraite: 
                - rsti: if(ISRETIRED, 
                             if(BEGINER, 0.7*sali, rsti), 
                          0)
                # Actualisation du nombre d'enfants par r√©gime
                - new_born: invl_mere.count(agem==0) + invl_pere.count(agem==0) 
                - nb_enf_RG: if(WORK_PRIVE, nb_enf + new_born, nb_enf)
                - nb_enf_RSI: if(WORK_INDEP, nb_enf + new_born, nb_enf)
                - nb_enf_FP: if(WORK_PUBLIC, nb_enf + new_born, nb_enf)
                
                - nb_pac: invl_mere.count(age <= 18) + invl_pere.count(age <= 18)
                
                - date_depart: date_retired(filter = (agem > 12*55)) 
                - to_be_retired: date_depart <= period and date_depart != -1 and not ISRETIRED
                
                - start_retirement: if(to_be_retired, period, start_retirement)
                - workstate: if(to_be_retired, RETIRED, workstate) 
                - new_rsti: pension_func(filter=to_be_retired)
                - rsti: if(ISRETIRED, rsti*(1+0), rsti)
                
                - rsti: if(to_be_retired, new_rsti, rsti*(1+revalo))
                - test: count(rsti>0)
